/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LM;

import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Thilona
 */
public class Managelecturers extends javax.swing.JFrame {

    String lecid = "";
    private int xAxisMousePoint;
    private int yAxisMousePoint;

    /**
     * Creates new form Managelecturers
     */
    public Managelecturers() {
        initComponents();
        loadFaculty();
        loadCampus();
        loadLevel();
        loadDepartment();
        loadBuilding();
        loadTableData();
    }
        protected void setMouseClickedLocation(int x, int y) {
        this.xAxisMousePoint = x;
        this.yAxisMousePoint = y;
    }
     protected void setWindowLocation(int x, int y) {
        this.setLocation(x - xAxisMousePoint, y - yAxisMousePoint);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lempid = new javax.swing.JTextField();
        llevel = new javax.swing.JComboBox<>();
        lfaculty = new javax.swing.JComboBox<>();
        lecname = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lrank = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lbuilding = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        ldep = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        lcampus = new javax.swing.JComboBox<>();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        windowTopBar = new javax.swing.JPanel();
        btn_Exit1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Employee ID", "Faculty", "Department", "Campus", "Building", "Level", "Rank"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 92, 582, 173));

        jLabel3.setText("Faculty");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 339, -1, -1));
        getContentPane().add(lempid, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 297, 192, -1));

        llevel.setEditable(true);
        llevel.setFocusable(false);
        getContentPane().add(llevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 415, 188, -1));

        lfaculty.setEditable(true);
        lfaculty.setFocusable(false);
        getContentPane().add(lfaculty, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 335, 188, -1));
        getContentPane().add(lecname, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 297, 188, -1));

        jLabel9.setText("Rank");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 419, -1, -1));

        jLabel8.setText(" Building");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 379, -1, -1));

        jLabel7.setText("Department");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 339, -1, -1));

        jLabel6.setText("Employee ID");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, -1, -1));

        lrank.setEditable(false);
        getContentPane().add(lrank, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 416, 195, -1));

        jLabel5.setText("Level");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 419, -1, -1));

        lbuilding.setEditable(true);
        lbuilding.setFocusable(false);
        getContentPane().add(lbuilding, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 375, 195, -1));

        jLabel4.setText("Campus");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 379, -1, -1));

        ldep.setEditable(true);
        ldep.setFocusable(false);
        getContentPane().add(ldep, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 335, 195, -1));

        jLabel2.setText("Lecturer Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        lcampus.setEditable(true);
        lcampus.setFocusable(false);
        getContentPane().add(lcampus, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 375, 188, -1));

        update.setBackground(new java.awt.Color(0, 153, 255));
        update.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.setBorderPainted(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 488, 120, -1));

        delete.setBackground(java.awt.Color.red);
        delete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.setBorderPainted(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 488, 120, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        windowTopBar.setBackground(new java.awt.Color(255, 255, 255));
        windowTopBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        windowTopBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                windowTopBarMouseDragged(evt);
            }
        });
        windowTopBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                windowTopBarMousePressed(evt);
            }
        });
        windowTopBar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_Exit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/close_1.png"))); // NOI18N
        btn_Exit1.setBorder(null);
        btn_Exit1.setBorderPainted(false);
        btn_Exit1.setContentAreaFilled(false);
        btn_Exit1.setFocusPainted(false);
        btn_Exit1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/close_2.png"))); // NOI18N
        btn_Exit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Exit1ActionPerformed(evt);
            }
        });
        windowTopBar.add(btn_Exit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 0, 34, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Manage Lecturers");
        windowTopBar.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 7, -1, 20));

        jPanel1.add(windowTopBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 600));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        if (selectedRow != -1) {
            lecname.setText(dtm.getValueAt(selectedRow, 1).toString());
            lfaculty.setSelectedItem(dtm.getValueAt(selectedRow, 3).toString());
            lcampus.setSelectedItem(dtm.getValueAt(selectedRow, 5).toString());
            llevel.setSelectedItem(dtm.getValueAt(selectedRow, 7).toString());
            lempid.setText(dtm.getValueAt(selectedRow, 2).toString());
            ldep.setSelectedItem(dtm.getValueAt(selectedRow, 4).toString());
            lbuilding.setSelectedItem(dtm.getValueAt(selectedRow, 6).toString());
            lrank.setText(dtm.getValueAt(selectedRow, 8).toString());
            lecid = dtm.getValueAt(selectedRow, 0).toString();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        try {
            if (lecname.getText().isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Lecture name is empty");
            } else if (lempid.getText().isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Employee ID is empty");
            } else if (lfaculty.getSelectedItem().toString().equals("<-Select->")) {
                JOptionPane.showMessageDialog(rootPane, "Select the Faculty");
            } else if (lcampus.getSelectedItem().toString().equals("<-Select->")) {
                JOptionPane.showMessageDialog(rootPane, "Select the Campus");
            } else if (ldep.getSelectedItem().toString().equals("<-Select->")) {
                JOptionPane.showMessageDialog(rootPane, "Select the Department");
            } else if (lbuilding.getSelectedItem().toString().equals("<-Select->")) {
                JOptionPane.showMessageDialog(rootPane, "Select the Building");
            } else if (llevel.getSelectedItem().toString().equals("<-Select->")) {
                JOptionPane.showMessageDialog(rootPane, "Select the Level");
            } else {
                String faculty = lfaculty.getSelectedItem().toString();
                String campus = lcampus.getSelectedItem().toString();
                String department = ldep.getSelectedItem().toString();
                String building = lbuilding.getSelectedItem().toString();
                String facultyid = "";
                String campusid = "";
                String depid = "";
                String buildingid = "";
                ResultSet rs1 = DB.DB.search("select idfaculty from faculty where name='" + faculty + "'");
                if (rs1.first()) {
                    facultyid = rs1.getString(1);
                }
                ResultSet rs2 = DB.DB.search("select idcampus from campus where name='" + campus + "'");
                if (rs2.first()) {
                    campusid = rs2.getString(1);
                }
                ResultSet rs3 = DB.DB.search("select iddepartment from department where name='" + department + "'");
                if (rs3.first()) {
                    depid = rs3.getString(1);
                }

                ResultSet rs4 = DB.DB.search("select idbuilding from building where name='" + building + "'");
                if (rs4.first()) {
                    buildingid = rs4.getString(1);
                }
                DB.DB.iud("update lecturer set name='" + lecname.getText() + "', emp_id='" + lempid.getText() + "', rank='" + lrank.getText() + "', faculty_id='" + facultyid + "', department_id='" + depid + "', campus_id='" + campusid + "', building_id='" + buildingid + "', level_id='" + llevel.getSelectedItem().toString() + "' where idlecturer='" + lecid + "'");
                JOptionPane.showMessageDialog(rootPane, "Successfully Updated");
                loadTableData();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        deleteLectures();
    }//GEN-LAST:event_deleteActionPerformed

    private void btn_Exit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Exit1ActionPerformed

        this.dispose();
    }//GEN-LAST:event_btn_Exit1ActionPerformed

    private void windowTopBarMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_windowTopBarMouseDragged
        this.setWindowLocation(evt.getXOnScreen(), evt.getYOnScreen());
    }//GEN-LAST:event_windowTopBarMouseDragged

    private void windowTopBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_windowTopBarMousePressed
        this.setMouseClickedLocation(evt.getX(), evt.getY());
    }//GEN-LAST:event_windowTopBarMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Managelecturers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Managelecturers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Managelecturers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Managelecturers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Managelecturers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Exit1;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> lbuilding;
    private javax.swing.JComboBox<String> lcampus;
    private javax.swing.JComboBox<String> ldep;
    private javax.swing.JTextField lecname;
    private javax.swing.JTextField lempid;
    private javax.swing.JComboBox<String> lfaculty;
    private javax.swing.JComboBox<String> llevel;
    private javax.swing.JTextField lrank;
    private javax.swing.JButton update;
    private javax.swing.JPanel windowTopBar;
    // End of variables declaration//GEN-END:variables

    private void loadFaculty() {
        try {
            lfaculty.addItem("<-Select->");
            ResultSet rs = DB.DB.search("select distinct name from faculty");
            while (rs.next()) {
                lfaculty.addItem(rs.getString(1));
            }
        } catch (Exception e) {
        }
    }

    private void loadCampus() {
        try {
            lcampus.addItem("<-Select->");
            ResultSet rs = DB.DB.search("select distinct name from campus");
            while (rs.next()) {
                lcampus.addItem(rs.getString(1));
            }
        } catch (Exception e) {
        }
    }

    private void loadLevel() {
        try {
            llevel.addItem("<-Select->");
            ResultSet rs = DB.DB.search("select distinct level from level");
            while (rs.next()) {
                llevel.addItem(rs.getString(1));
            }
        } catch (Exception e) {
        }
    }

    private void loadDepartment() {
        try {
            ldep.addItem("<-Select->");
            ResultSet rs = DB.DB.search("select distinct name from department");
            while (rs.next()) {
                ldep.addItem(rs.getString(1));
            }
        } catch (Exception e) {
        }
    }

    private void loadBuilding() {
        try {
            lbuilding.addItem("<-Select->");
            ResultSet rs = DB.DB.search("select distinct name from building");
            while (rs.next()) {
                lbuilding.addItem(rs.getString(1));
            }
        } catch (Exception e) {
        }
    }

    private void clearFields() {
        lecname.setText("");
        lempid.setText("");
        lrank.setText("");
        lfaculty.setSelectedItem("<-Select->");
        lcampus.setSelectedItem("<-Select->");
        llevel.setSelectedItem("<-Select->");
        ldep.setSelectedItem("<-Select->");
        lbuilding.setSelectedItem("<-Select->");
    }

    private void loadTableData() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            ResultSet rs = DB.DB.search("select l.idlecturer,l.name,l.emp_id,f.name,d.name,c.name,b.name,l.level_id,l.rank from lecturer l JOIN building b on l.building_id=b.idbuilding JOIN campus c on l.campus_id=c.idcampus JOIN department d on l.department_id=d.iddepartment JOIN faculty f on l.faculty_id=f.idfaculty where l.status!='deactive'");
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                v.add(rs.getString(6));
                v.add(rs.getString(7));
                v.add(rs.getString(8));
                v.add(rs.getString(9));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void deleteLectures() {
        try {
            DB.DB.iud("update lecturer set status='deactive' where idlecturer='" + lecid + "'");
            JOptionPane.showMessageDialog(rootPane, "Successfully Deleted");
            loadTableData();
            clearFields();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
